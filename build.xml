<project name="IdeaVim" default="deploy" basedir=".">
    <!--
    * IdeaVim - A Vim emulator plugin for IntelliJ Idea
    * Copyright (C) 2003-2006 Rick Maddy
    *
    * This program is free software; you can redistribute it and/or
    * modify it under the terms of the GNU General Public License
    * as published by the Free Software Foundation; either version 2
    * of the License, or (at your option) any later version.
    *
    * This program is distributed in the hope that it will be useful,
    * but WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    * GNU General Public License for more details.
    *
    * You should have received a copy of the GNU General Public License
    * along with this program; if not, write to the Free Software
    * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
    -->

    <!--
    External Properties (set in IntelliJ project):
      idea.home - $APPLICATION_HOME_DIR$
    -->
    <property name="src" value="src" />
    <property name="resources" value="resources" />
    <property name="classes" value="classes" />
    <property name="javadoc" value="docs/javadoc" />
    <property name="build" value="build" />
    <property name="install" value="install" />
    <property name="dist" value="dist" />
    <!-- Update to your IntelliJ installtion -->
    <property name="idea.home" value="/Applications/IntelliJ IDEA 5.1.2.app" />
    <property name="plugin.home" value="${user.home}/Library/Application Support/IntelliJIDEA50" />

    <property name="project" value="IdeaVIM" />
    <!-- Update this prior to building a new distribution -->
    <property name="idea-version" value="5.x" />
    <property name="version" value="0.11.1" />
    <property name="since-version" value="3461" />
    <property name="compiler.build" value="javac14" />

    <path id="build.classpath">
        <pathelement path="${idea.home}/lib/extensions.jar" />
        <pathelement path="${idea.home}/lib/openapi.jar" />
        <pathelement path="${idea.home}/lib/jdom.jar" />
        <pathelement path="${classes}"/>
    </path>

    <target name="clean.build">
        <delete dir="${build}"/>
    </target>

    <target name="clean.help">
        <delete dir="${build}/help"/>
    </target>

    <target name="clean" depends="clean.build" description="Removes all generated files" >
        <delete dir="${javadoc}"/>
        <delete dir="${project}"/>
    </target>

    <target name="compile">
        <mkdir dir="${classes}"/>
        <javac destdir="${classes}" debug="on" deprecation="on" classpathref="build.classpath" source="1.4" target="1.4" >
            <src path="${src}"/>
            <include name="com/maddyhome/idea/**" />
        </javac>
    </target>

    <target name="classes.jar">
        <mkdir dir="${build}"/>
        <jar basedir="${classes}" jarfile="${build}/${project}.jar" compress="yes"/>
    </target>

    <target name="copy">
        <mkdir dir="${classes}"/>
        <mkdir dir="${classes}/META-INF"/>
        <copy file="META-INF/plugin.xml" todir="${classes}/META-INF">
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
                <filter token="IDEA-VERSION" value="${idea-version}" />
                <filter token="SINCE-VERSION" value="${since-version}" />
            </filterset>
        </copy>
        <copy todir="${classes}">
            <fileset dir="${src}" excludes="**/*.java"/>
        </copy>
        <copy todir="${classes}">
            <fileset dir="${resources}"/>
        </copy>
    </target>

    <target name="help" depends="clean.help, compile">
        <mkdir dir="${build}/help/txt"/>
        <mkdir dir="${build}/help/vim"/>

        <copy todir="${build}/help/txt">
            <fileset dir="help/txt">
                <include name="*.txt"/>
            </fileset>
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
            </filterset>
        </copy>

        <fileset dir="${build}/help/txt" id="txt.files">
            <include name="*.txt"/>
        </fileset>
        <pathconvert property="helpfiles" refid="txt.files" pathsep=" "/>

        <java classname="com.maddyhome.idea.vim.help.MakeTags" classpath="${classes}" output="${build}/help/vim/tags" error="error">
            <arg line="${helpfiles}"/>
        </java>
        <exec executable="sort" output="${build}/help/vim/tags.sort">
            <arg value="-u"/>
            <arg file="${build}/help/vim/tags"/>
        </exec>
        <move file="${build}/help/vim/tags.sort" tofile="${build}/help/vim/tags"/>

        <exec executable="perl">
            <arg file="help/vim2jh.pl"/>
            <arg path="${build}/help"/>
            <arg path="${build}/help/vim/tags"/>
            <arg line="${helpfiles}"/>
        </exec>

        <copy todir="${build}/help">
            <fileset dir="help">
                <include name="images/"/>
            </fileset>
            <fileset dir="help/jh">
                <include name="*"/>
            </fileset>
        </copy>

        <delete dir="${build}/help/txt"/>

        <jar basedir="${build}/help" jarfile="${build}/help.jar">
        </jar>
    </target>

    <target name="build" depends="clean.build, compile, copy, classes.jar, help" description="Compiles all source code and created plugin jar file" >
    </target>

    <target name="deploy" depends="build" description="Copies plugin to IntelliJ plugin directory" >
        <mkdir dir="${plugin.home}/IdeaVIM/lib"/>
        <copy file="${build}/${project}.jar" todir="${plugin.home}/IdeaVIM/lib" />
        <mkdir dir="${plugin.home}/IdeaVIM/help"/>
        <copy file="${build}/help.jar" todir="${plugin.home}/IdeaVIM/help" />
    </target>

    <target name="dist" depends="dist-src, dist-bin" description="Creates the src and bin distribution files" />

    <target name="dist-bin" depends="clean, build" description="Creates a tar file containing the plugin distribution" >
        <mkdir dir="dist" />
        <delete dir="${project}-${version}-${idea-version}" />
        <mkdir dir="${project}-${version}-${idea-version}"/>
        <copy todir="${project}-${version}-${idea-version}">
            <fileset dir="." includes="license/**"/>
            <fileset dir="${install}" includes="**"/>
        </copy>
        <copy todir="${project}-${version}-${idea-version}/lib">
            <fileset dir="${build}" includes="*.jar"/>
        </copy>
        <copy todir="${project}-${version}-${idea-version}/docs">
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
                <filter token="IDEA-VERSION" value="${idea-version}" />
            </filterset>
            <fileset dir="docs" includes="vim/*.txt" excludes="javadoc" />
        </copy>
        <copy file="docs/README.txt" tofile="${project}-${version}-${idea-version}/README" >
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
                <filter token="IDEA-VERSION" value="${idea-version}" />
            </filterset>
        </copy>
        <copy file="docs/CHANGES.txt" tofile="${project}-${version}-${idea-version}/CHANGES" >
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
                <filter token="IDEA-VERSION" value="${idea-version}" />
            </filterset>
        </copy>
        <copy file="docs/NOTES.txt" tofile="${project}-${version}-${idea-version}/NOTES" >
            <filterset>
                <filter token="NAME" value="${project}" />
                <filter token="VERSION" value="${version}" />
                <filter token="IDEA-VERSION" value="${idea-version}" />
            </filterset>
        </copy>
        <tar basedir="." destfile="${dist}/${project}-${version}-${idea-version}-bin.tar.gz" compression="gzip" includes="${project}-${version}-${idea-version}/**" />
        <move todir="${project}">
            <fileset dir="${project}-${version}-${idea-version}"/>
        </move>
        <zip basedir="." zipfile="${dist}/${project}-${version}-${idea-version}.zip" compress="true" includes="${project}/**" />
    </target>

    <target name="dist-src" depends="clean" description="Creates the source tar file" >
        <mkdir dir="dist" />
        <tar basedir="." destfile="${dist}/${project}-${version}-${idea-version}-src.tar.gz" excludes="*.iws,dist/**,scratch/**,web/docs/**" compression="gzip"/>
    </target>

    <target name="javadoc" depends="build" description="Generates Javadoc for all source code" >
        <delete dir="${javadoc}"/>
        <mkdir dir="${javadoc}" />
        <javadoc classpathref="build.classpath" access="protected" destdir="${javadoc}" packagenames="com.*" sourcepath="src" use="true" />
    </target>
</project>
